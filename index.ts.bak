import "dotenv/config";
import { Stagehand } from "@browserbasehq/stagehand";  await stagehand.close();
}

// Test function for resume upload
async function testResumeUpload() {
  console.log('\n🧪 Testing resume upload functionality...');
  
  const stagehand = new Stagehand({
    env: "LOCAL",
    modelName: "google/gemini-2.5-flash",
    modelClientOptions: {
      apiKey: process.env.GOOGLE_API_KEY,
    },
  });

  await stagehand.init();
  const page = stagehand.page;
  
  // Test with a known job application URL that has file upload
  const testJob = {
    job_title: "Test Resume Upload",
    company_name: "Test Company", 
    job_url: "https://jobs.lever.co/example-job" // Replace with actual test URL
  };
  
  const jobApplier = new JobApplier(page);
  const result = await jobApplier.processJobApplication(testJob);
  
  console.log(`📋 Test Result:`, result);
  
  await stagehand.close();
}bleJobs } from "./jobs.js";
import { JobApplier } from './agent/applier/applier.js';
import { JobReporter } from './utils/reporter.js';

async function main() {
  const stagehand = new Stagehand({
    env: "LOCAL",
    modelName: "google/gemini-2.5-flash",
    modelClientOptions: {
      apiKey: process.env.GOOGLE_API_KEY,
    },
  });

  await stagehand.init();

  console.log(`Stagehand Session Started`);
  console.log(`Watch live: https://browserbase.com/sessions/${stagehand.browserbaseSessionID}`);

  const page = stagehand.page;
  const jobs = AvailableJobs;
  
  // Create a JobApplier and Reporter instances
  const jobApplier = new JobApplier(page);
  const reporter = new JobReporter();
  
  console.log(`\n🚀 Starting job application process for ${jobs.length} jobs...`);
  
  for (let i = 0; i < jobs.length; i++) {
    const job = jobs[i];
    try {
      console.log(`\n🎯 Processing job ${i + 1}/${jobs.length}: ${job.job_title} at ${job.company_name}`);
      const result = await jobApplier.processJobApplication(job);
      reporter.addResult(result);
      
      // Show progress
      const stats = reporter.getSummaryStats();
      console.log(`📊 Progress: ${stats.successfulJobs} success, ${stats.failedJobs} failed, ${stats.skippedJobs} skipped, ${stats.errorJobs} errors (${stats.successRate}% success rate)`);
      
    } catch (error) {
      console.error(`❌ Unexpected error processing job ${job.job_title} at ${job.company_name}:`, error);
      
      // Create error result manually
      reporter.addResult({
        jobName: job.job_title,
        jobLink: job.job_url,
        status: 'error',
        imageOfLastContact: '',
        description: 'Unexpected error during processing',
        successMessage: '',
        fieldsFilled: [],
        errorMessage: error instanceof Error ? error.message : 'Unknown error',
        processingTimeMs: 0,
        startTime: new Date().toISOString(),
        endTime: new Date().toISOString()
      });
      
      continue; // Continue to next job
    }
  }

  console.log('\n🏁 Job application process completed!');
  
  // Generate final report
  const reportPath = await reporter.generateReport();
  const finalStats = reporter.getSummaryStats();
  
  console.log('\n📈 Final Summary:');
  console.log(`  Total Jobs: ${finalStats.totalJobs}`);
  console.log(`  ✅ Successful: ${finalStats.successfulJobs}`);
  console.log(`  ❌ Failed: ${finalStats.failedJobs}`);
  console.log(`  ⏭️ Skipped: ${finalStats.skippedJobs}`);
  console.log(`  🚫 Errors: ${finalStats.errorJobs}`);
  console.log(`  📊 Success Rate: ${finalStats.successRate}%`);
  console.log(`\n📋 Detailed report saved to: ${reportPath}`);

  await stagehand.close();
  const jobApplier = new JobApplier(page);
  
  for (const job of jobs) {
    try {
      console.log(`\n� Processing job: ${job.job_title} at ${job.company_name}`);
      await jobApplier.processJobApplication(job);
    } catch (error) {
      console.error(`❌ Error processing job ${job.job_title} at ${job.company_name}:`, error);
      await page.screenshot({ path: `error_${job.company_name.replace(/\s+/g, '_')}_${Date.now()}.png` });
      continue; // Continue to next job
    }
  }

  await stagehand.close();
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
